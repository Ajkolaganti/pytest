trigger:
  - main  # or your default branch name

# For scheduled runs
schedules:
- cron: "0 */6 * * *"  # Run every 6 hours
  displayName: 'Regular API Test'
  branches:
    include:
      - main  # or your default branch name
  always: true

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: graphql-test-secrets  # Create this variable group in Azure DevOps
  - name: PIP_CACHE_DIR
    value: $(Pipeline.Workspace)/.pip
  - name: TEST_REPORT_DIR
    value: $(Build.ArtifactStagingDirectory)/test-reports

stages:
- stage: Test
  jobs:
  - job: RunTests
    timeoutInMinutes: 30
    steps:
    - checkout: self  # Explicitly checkout your repository

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'  # Match your Python version
        addToPath: true
      displayName: 'Set up Python'

    - task: Cache@2
      inputs:
        key: 'pip | "$(Agent.OS)" | requirements.txt'
        restoreKeys: |
          pip | "$(Agent.OS)"
        path: $(PIP_CACHE_DIR)
      displayName: 'Cache pip packages'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install msal pytest-reportlog pytest-metadata pytest-sugar
      displayName: 'Install dependencies'

    # Get new token using MSAL
    - task: PythonScript@0
      inputs:
        scriptSource: 'inline'
        script: |
          import msal
          import os
          
          # Initialize MSAL app
          app = msal.ConfidentialClientApplication(
              client_id="$(CLIENT_ID)",
              client_credential="$(CLIENT_SECRET)",
              authority=f"https://login.microsoftonline.com/$(TENANT_ID)"
          )
          
          # Get token
          result = app.acquire_token_for_client(scopes=["$(SCOPE)"])
          
          if "access_token" in result:
              # Write token to environment variable
              print(f"##vso[task.setvariable variable=BEARER_TOKEN]Bearer {result['access_token']}")
          else:
              print(f"Error getting token: {result.get('error_description', 'Unknown error')}")
              exit(1)
      displayName: 'Get fresh access token'
      env:
        CLIENT_ID: $(CLIENT_ID)
        CLIENT_SECRET: $(CLIENT_SECRET)
        TENANT_ID: $(TENANT_ID)
        SCOPE: $(SCOPE)

    - script: |
        # Create .env file with secrets
        echo "API_URL=$(API_URL)" > .env
        echo "BEARER_TOKEN=$(BEARER_TOKEN)" >> .env
      displayName: 'Set up environment variables'
      env:
        API_URL: $(API_URL)
        BEARER_TOKEN: $(BEARER_TOKEN)

    # Run tests with enhanced reporting
    - script: |
        mkdir -p $(TEST_REPORT_DIR)
        python -m pytest \
          --html=$(TEST_REPORT_DIR)/report.html \
          --self-contained-html \
          --report-log=$(TEST_REPORT_DIR)/report.json \
          --junitxml=$(TEST_REPORT_DIR)/junit.xml \
          --metadata-from-json='{"API_URL": "$(API_URL)", "Test Run": "$(Build.BuildNumber)"}' \
          -v
      displayName: 'Run tests'
      continueOnError: true  # Continue pipeline even if tests fail

    # Generate test trend data
    - task: PythonScript@0
      inputs:
        scriptSource: 'inline'
        script: |
          import json
          import os
          from datetime import datetime
          
          # Load current test results
          with open('$(TEST_REPORT_DIR)/report.json') as f:
              current_results = json.load(f)
          
          # Create trend data
          trend_data = {
              'timestamp': datetime.now().isoformat(),
              'build_id': '$(Build.BuildId)',
              'metrics': {
                  'total': len(current_results['tests']),
                  'passed': len([t for t in current_results['tests'] if t['outcome'] == 'passed']),
                  'failed': len([t for t in current_results['tests'] if t['outcome'] == 'failed']),
                  'skipped': len([t for t in current_results['tests'] if t['outcome'] == 'skipped']),
              }
          }
          
          # Save trend data
          with open('$(TEST_REPORT_DIR)/trend.json', 'w') as f:
              json.dump(trend_data, f, indent=2)
      displayName: 'Generate test trends'
      condition: succeededOrFailed()

    # Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(TEST_REPORT_DIR)/junit.xml'
        testRunTitle: 'GraphQL API Tests'
        failTaskOnFailedTests: false
      displayName: 'Publish test results'
      condition: succeededOrFailed()

    # Publish detailed reports
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(TEST_REPORT_DIR)'
        artifact: 'TestReports'
        publishLocation: 'pipeline'
      displayName: 'Publish test reports'
      condition: succeededOrFailed()

    # Send enhanced notifications
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $TREND_DATA = Get-Content "$(TEST_REPORT_DIR)/trend.json" | ConvertFrom-Json
          
          $BODY = @"
          Pipeline: $(Build.DefinitionName)
          Status: $(Agent.JobStatus)
          Build: $(Build.BuildNumber)
          Triggered By: $(Build.RequestedFor)
          
          Test Summary:
          - Total Tests: $($TREND_DATA.metrics.total)
          - Passed: $($TREND_DATA.metrics.passed)
          - Failed: $($TREND_DATA.metrics.failed)
          - Skipped: $($TREND_DATA.metrics.skipped)
          
          Reports:
          - Detailed HTML Report: $(System.TeamFoundationCollectionUri)/$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)
          - Test Results: $(System.TeamFoundationCollectionUri)/$(System.TeamProject)/_TestManagement/Runs?_a=runCharts
          - Trend Analysis: $(System.TeamFoundationCollectionUri)/$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=ms.vss-test-web.test-result-details
          "@
          
          Send-MailMessage -From "$(EmailFrom)" -To "$(NotificationEmail)" -Subject "API Test Results - $(Build.BuildNumber)" -Body $BODY -SmtpServer "$(SmtpServer)"
      displayName: 'Send test report notification'
      condition: always() 